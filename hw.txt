#Problem #1

 class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        if nums == None or len(nums) == 0:
            return -1
        
        count = 1
        slow = 1

        for i in range(1, len(nums)):
            if nums[i] == nums[i - 1]:
                count = count + 1
            else:
                count = 1
            if count <= 2:
                nums[slow] = nums[i]
                slow = slow + 1
        
        return slow

             

#Problem #2

class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """
        Do not return anything, modify nums1 in-place instead.
        """
        if nums1 == None or nums2 == None or len(nums1) == 0 or len(nums2) == 0:
            return
        
        p3 = len(nums1) - 1
        p1 = m - 1
        p2 = n - 1

        while p1 >= 0 and p2 >= 0:
            if nums1[p1] > nums2[p2]:
                nums1[p3] = nums1[p1]
                nums1[p1] = 0
                p1 = p1 - 1
                p3 = p3 - 1
            else:
                nums1[p3] = nums2[p2]
                p2 = p2 - 1
                p3 = p3 - 1
        
        while p2 >= 0:
            nums1[p3] = nums2[p2]
            p2 = p2 - 1
            p3 = p3 - 1
        print(nums1)
        

#Problem #3

class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        if matrix == None or len(matrix[0]) == 0:
            return False
        
        i = len(matrix) - 1
        j = 0

        while i >= 0 and j <= len(matrix[0]) - 1:
            if matrix[i][j] == target:
                return True
            elif matrix[i][j] > target:
                i = i - 1
                j
            else:
                j = j + 1
                i
        return False